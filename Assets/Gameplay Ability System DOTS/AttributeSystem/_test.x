//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by Gameplay Ability System - Attribute Group Editor
//     version 1
//     from Assets/Gameplay Ability System DOTS/AttributeSystem/test.attributegroup
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Unity.Entities;

namespace _MyGameplayAbilitySystem.Attributes
{


    /// <summary>
    /// Primary attribute group
    /// </summary>
    public sealed class AttributeGroupPrimary : GameplayAbilitySystem.AttributeSystem.IAttributeGroup
    {
        public enum EAttribute
        {
            Strength, Agility, Intelligence, Health, MaxHealth, Mana, MaxMana
        }

        public static GameplayAbilitySystem.AttributeSystem.GenericBaseValue GetBaseValue(EAttribute attr, EntityManager em, Entity e)
        {
            switch (attr)
            {
                case EAttribute.Strength:
                    return em.GetComponentData<AttributeStrength.BaseValue>(e);
                case EAttribute.Agility:
                    return em.GetComponentData<AttributeStrength.BaseValue>(e);
                default:
                    return new GameplayAbilitySystem.AttributeSystem.GenericBaseValue();
            }
        }

        public static GameplayAbilitySystem.AttributeSystem.GenericCurrentValue GetCurrentValue(EntityManager em, Entity e)
        {
            return em.GetComponentData<AttributeStrength.CurrentValue>(e);
        }

        public static void SetBaseValue(EntityManager em, Entity e, GameplayAbilitySystem.AttributeSystem.GenericBaseValue v)
        {
            em.SetComponentData<AttributeStrength.BaseValue>(e, v);
        }

        public static void SetCurrentValue(EntityManager em, Entity e, GameplayAbilitySystem.AttributeSystem.GenericCurrentValue v)
        {
            em.SetComponentData<AttributeStrength.CurrentValue>(e, v);
        }


        /// <summary>
        /// The character's strength
        /// </summary>
        public sealed class AttributeStrength : GameplayAbilitySystem.AttributeSystem.IAttribute
        {
            /// <summary>
            /// Base Value of Attribute
            /// </summary>
            public struct BaseValue : Unity.Entities.IComponentData
            {

                /// <summary>
                /// Value of component
                /// </summary>
                public int Value;

                public static implicit operator GameplayAbilitySystem.AttributeSystem.GenericBaseValue(BaseValue v)
                {
                    return new GameplayAbilitySystem.AttributeSystem.GenericBaseValue()
                    {
                        Value = v.Value
                    };
                }

                public static implicit operator BaseValue(GameplayAbilitySystem.AttributeSystem.GenericBaseValue v)
                {
                    return new BaseValue()
                    {
                        Value = v.Value
                    };
                }
            }

            /// <summary>
            /// Current Value of Attribute
            /// </summary>
            public struct CurrentValue : Unity.Entities.IComponentData
            {
                /// <summary>
                /// Total additive modifiers
                /// </summary>
                public short Add;

                /// <summary>
                /// Total multiplicative modifiers
                /// </summary>
                public short Multiply;

                /// <summary>
                /// Value of component
                /// </summary>
                public int Value;

                public static implicit operator GameplayAbilitySystem.AttributeSystem.GenericCurrentValue(CurrentValue v)
                {
                    return new GameplayAbilitySystem.AttributeSystem.GenericCurrentValue()
                    {
                        Value = v.Value,
                        Add = v.Add,
                        Multiply = v.Multiply
                    };
                }

                public static implicit operator CurrentValue(GameplayAbilitySystem.AttributeSystem.GenericCurrentValue v)
                {
                    return new CurrentValue()
                    {
                        Value = v.Value,
                        Add = v.Add,
                        Multiply = v.Multiply
                    };
                }
            }
        }


        /// <summary>
        /// The character's agility
        /// </summary>
        public sealed class AttributeAgility : GameplayAbilitySystem.AttributeSystem.IAttribute
        {

            /// <summary>
            /// Base Value of Attribute
            /// </summary>
            public struct BaseValue : Unity.Entities.IComponentData
            {

                /// <summary>
                /// Value of component
                /// </summary>
                public int Value;
            }

            /// <summary>
            /// Current Value of Attribute
            /// </summary>
            public struct CurrentValue : Unity.Entities.IComponentData
            {
                /// <summary>
                /// Total additive modifiers
                /// </summary>
                public short Add;

                /// <summary>
                /// Total multiplicative modifiers
                /// </summary>
                public short Multiply;

                /// <summary>
                /// Value of component
                /// </summary>
                public int Value;
            }
        }


        /// <summary>
        /// The character's intelligence
        /// </summary>
        public sealed class AttributeIntelligence : GameplayAbilitySystem.AttributeSystem.IAttribute
        {

            /// <summary>
            /// Base Value of Attribute
            /// </summary>
            public struct BaseValue : Unity.Entities.IComponentData
            {

                /// <summary>
                /// Value of component
                /// </summary>
                public int Value;
            }

            /// <summary>
            /// Current Value of Attribute
            /// </summary>
            public struct CurrentValue : Unity.Entities.IComponentData
            {
                /// <summary>
                /// Total additive modifiers
                /// </summary>
                public short Add;

                /// <summary>
                /// Total multiplicative modifiers
                /// </summary>
                public short Multiply;

                /// <summary>
                /// Value of component
                /// </summary>
                public int Value;
            }
        }


        /// <summary>
        /// The amount of damage player can take
        /// </summary>
        public sealed class AttributeHealth : GameplayAbilitySystem.AttributeSystem.IAttribute
        {

            /// <summary>
            /// Base Value of Attribute
            /// </summary>
            public struct BaseValue : Unity.Entities.IComponentData
            {

                /// <summary>
                /// Value of component
                /// </summary>
                public int Value;
            }

            /// <summary>
            /// Current Value of Attribute
            /// </summary>
            public struct CurrentValue : Unity.Entities.IComponentData
            {
                /// <summary>
                /// Total additive modifiers
                /// </summary>
                public short Add;

                /// <summary>
                /// Total multiplicative modifiers
                /// </summary>
                public short Multiply;

                /// <summary>
                /// Value of component
                /// </summary>
                public int Value;
            }
        }


        /// <summary>
        /// The maximum health the player can have
        /// </summary>
        public sealed class AttributeMaxHealth : GameplayAbilitySystem.AttributeSystem.IAttribute
        {

            /// <summary>
            /// Base Value of Attribute
            /// </summary>
            public struct BaseValue : Unity.Entities.IComponentData
            {

                /// <summary>
                /// Value of component
                /// </summary>
                public int Value;
            }

            /// <summary>
            /// Current Value of Attribute
            /// </summary>
            public struct CurrentValue : Unity.Entities.IComponentData
            {
                /// <summary>
                /// Total additive modifiers
                /// </summary>
                public short Add;

                /// <summary>
                /// Total multiplicative modifiers
                /// </summary>
                public short Multiply;

                /// <summary>
                /// Value of component
                /// </summary>
                public int Value;
            }
        }


        /// <summary>
        /// The amount of mana the player can use to cast spell.
        /// </summary>
        public sealed class AttributeMana : GameplayAbilitySystem.AttributeSystem.IAttribute
        {

            /// <summary>
            /// Base Value of Attribute
            /// </summary>
            public struct BaseValue : Unity.Entities.IComponentData
            {

                /// <summary>
                /// Value of component
                /// </summary>
                public int Value;
            }

            /// <summary>
            /// Current Value of Attribute
            /// </summary>
            public struct CurrentValue : Unity.Entities.IComponentData
            {
                /// <summary>
                /// Total additive modifiers
                /// </summary>
                public short Add;

                /// <summary>
                /// Total multiplicative modifiers
                /// </summary>
                public short Multiply;

                /// <summary>
                /// Value of component
                /// </summary>
                public int Value;
            }
        }


        /// <summary>
        /// The maximum mana the player can have
        /// </summary>
        public sealed class AttributeMaxMana : GameplayAbilitySystem.AttributeSystem.IAttribute
        {

            /// <summary>
            /// Base Value of Attribute
            /// </summary>
            public struct BaseValue : Unity.Entities.IComponentData
            {

                /// <summary>
                /// Value of component
                /// </summary>
                public int Value;
            }

            /// <summary>
            /// Current Value of Attribute
            /// </summary>
            public struct CurrentValue : Unity.Entities.IComponentData
            {
                /// <summary>
                /// Total additive modifiers
                /// </summary>
                public short Add;

                /// <summary>
                /// Total multiplicative modifiers
                /// </summary>
                public short Multiply;

                /// <summary>
                /// Value of component
                /// </summary>
                public int Value;
            }
        }

    }
}